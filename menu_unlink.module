<?php

define ('MENU_UNLINK_TYPE_NONE', -1, TRUE);
define ('MENU_UNLINK_TYPE_REMOVE', 0, TRUE);
define ('MENU_UNLINK_TYPE_FRAGMENT', 1, TRUE);
define ('MENU_UNLINK_DEFAULT_FRAGMENT', 'main-menu', TRUE);

/**
 * Implementation of hook_menu().
 */
function menu_unlink_menu() {
  $items['admin/settings/menu_unlink'] = array(
    'title' => t('Menu unlink'),
    'page callback' => 'menu_unlink_overview',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'menu_unlink.admin.inc',
  );
  $items['admin/settings/menu_unlink/list'] = array(
    'title' => t('List'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/menu_unlink/bulk'] = array(
    'title' => t('Bulk'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_unlink_bulk_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'menu_unlink.admin.inc',
  );
  $items['admin/settings/menu_unlink/%/delete'] = array(
    'title' => t('Delete'),
    'page callback' => 'menu_unlink_delete',
    'page arguments' => array(3, 'admin/settings/menu_unlink'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function menu_unlink_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'menu_edit_item') {
    $form['menu']['menu_unlink_fs'] = array(
      '#type' => 'fieldset',
      '#title' => t('Unlink options'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      'menu_unlink_type' => array(
        '#type' => 'radios',
        '#title' => t('Select options'),
        '#description' => t('Leave this alone if you do not want to change.'),
        '#default_value' => variable_get('menu_unlink_type_mlid_'. arg(4), MENU_UNLINK_TYPE_NONE),
        '#options' => array(
          MENU_UNLINK_TYPE_NONE => t('None'),
          MENU_UNLINK_TYPE_REMOVE => t('Remove'),
          MENU_UNLINK_TYPE_FRAGMENT => t('Fragment')
        ),
      ),
      'menu_unlink_fragment' => array(
        '#type' => 'textfield',
        '#title' => t('Fragment'),
        '#description' => t('If you select fragment above, you can define fragment on your own.'),
        '#default_value' => variable_get('menu_unlink_fragment_mlid_'. arg(4), MENU_UNLINK_DEFAULT_FRAGMENT),
      ),
    );

    $form['#submit'] = array_merge(array('menu_unlink_form_submit'), $form['#submit']);
  }
}

/**
 * Submit callback function.
 */
function menu_unlink_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $type = (int) $values['menu']['menu_unlink_fs']['menu_unlink_type'];
  $fragment = $values['menu']['menu_unlink_fs']['menu_unlink_fragment'];
  if ($type === MENU_UNLINK_TYPE_NONE) {
    menu_unlink_delete($values['menu']['mlid']);
  }
  else {
    menu_unlink_save($values['menu']['mlid'], $type, $fragment);
  }
}

/**
 * Implementation of hook_theme().
 */
function menu_unlink_theme() {
  return array(
    'menu_item_link' => array(
      'arguments' => array('link' => NULL),
      'function' => 'menu_unlink_menu_item_link',
    ),
  );
}

/**
 * Override theme_menu_item_link().
 */
function menu_unlink_menu_item_link($link) {
  if (empty($link['localized_options'])) {
    $link['localized_options'] = array();
  }

  $current_path = drupal_get_path_alias($_GET['q']);
  $current_path = preg_replace('/(\?|\/*\?).*$/', '', $current_path) .'/';

  if (strpos($current_path, drupal_get_path_alias($link['href']) .'/') !== FALSE) {
    if (isset($link['localized_options']['attributes']['class'])) {
      $link['localized_options']['attributes']['class'] .= ' active';
    }
    else {
      $link['localized_options']['attributes']['class'] = 'active';
    }
  }
  
  if ($_link = menu_unlink_check($link)) {
    return $_link;
  }

  return l($link['title'], $link['href'], $link['localized_options']);
}

/**
 * Check links.
 */
function menu_unlink_check($link) {
  $type = variable_get('menu_unlink_type_mlid_'. $link['mlid'], FALSE);
  if (is_numeric($type)) {
    switch ($type) {
      case MENU_UNLINK_TYPE_REMOVE:
        return $link['title'];
      break;
      case MENU_UNLINK_TYPE_FRAGMENT:
        $fragment = variable_get('menu_unlink_fragment_mlid_'. $link['mlid'], MENU_UNLINK_DEFAULT_FRAGMENT);
        $href = base_path();
        $href .= drupal_get_path_alias($_GET['q']);
        $href .= '#'. (empty($fragment) ? MENU_UNLINK_DEFAULT_FRAGMENT : $fragment);
        $link['localized_options']['attributes']['href'] = $href;
        $attributes = '';
        foreach ($link['localized_options']['attributes'] as $key => $value) {
          $attributes .= " $key=".'"'. $value .'"';
        }
        return "<a $attributes>{$link['title']}</a>";
      break;
    }
  }
  return FALSE;
}

/**
 * Return array of mlids
 */
function menu_unlink_get_links() {
  $links = nl2br(variable_get('menu_unlink_mlids', ''));
  $lines = explode('<br />', $links);
  $mlids = array();
  foreach ($lines as $line) {
    $tmp = explode(',', $line);
    foreach ($tmp as $mlid) {
      $mlids[] = trim($mlid);
    }
  }
  return $mlids;
}

/**
 * Extract textarea value to mlids array.
 */
function menu_unlink_extract($value) {
  $links = nl2br($value);
  $lines = explode('<br />', $links);
  $mlids = array();
  foreach ($lines as $line) {
    $tmp = explode(',', $line);
    foreach ($tmp as $mlid) {
      $mlids[] = trim($mlid);
    }
  }
  return $mlids;
}

/**
 * Delete configure.
 */
function menu_unlink_delete($mlid, $redirect = FALSE) {
  variable_del('menu_unlink_type_mlid_'. $mlid);
  variable_del('menu_unlink_fragment_mlid_'. $mlid);
  if ($redirect) {
    drupal_goto($redirect);
  }
}

/**
 * Save configure.
 */
function menu_unlink_save($mlid, $type, $fragment) {
  variable_set('menu_unlink_type_mlid_'. $mlid, $type);
  variable_set('menu_unlink_fragment_mlid_'. $mlid, $fragment);
}


/**
 * Return readable type.
 */
function menu_unlink_type_readable($type) {
  switch ($type) {
    case MENU_UNLINK_TYPE_NONE:
      $type = t('None');
    break;
    case MENU_UNLINK_TYPE_REMOVE:
      $type = t('Remove');
    break;
    case MENU_UNLINK_TYPE_FRAGMENT:
      $type = t('Fragment');
    break;
  }
  return $type;
}
